package com.cyntaks.GDXGIDE;

import java.util.ArrayList;

import com.badlogic.gdx.Gdx;
import com.cyntaks.GDXGIDE.input.AbstractInputHandler;
import com.cyntaks.GDXGIDE.input.GridInputHandler;

public class Grid{

	private boolean alive;
	private Cell[][] cells;
	private int rows;
	private int cols;
	
	public static final int HORIZONTAL = 0;
	public static final int VERTICAL = 1;
	private int orientation;
	
	public static final int NEIGHBOR_UP = 0;
	public static final int NEIGHBOR_DOWN = 1;
	public static final int NEIGHBOR_LEFT = 2;
	public static final int NEIGHBOR_RIGHT = 3;

	private static ArrayList<Cell> lateRenderList = new ArrayList<Cell>();
	private ArrayList<Cell> visibleCells = new ArrayList<Cell>();

	private CellDragger cellDragger;
	private int gapSize;
	
	private int rowsPerScreen;
	private int colsPerScreen;

	protected static Cell BLANK_TILE;
	
	private GridInputHandler inputHandler;
	private float scrollX;
	private float scrollY;
	private float scrollDx;
	private float scrollDy;
	private float lastScrollX;
	private float lastScrollY;
	
	private Window window;
	
	private ScrollIndicator firstScrollIndicator;
	private ScrollIndicator secondScrollIndicator;

	static{
		Grid grid = new Grid(new int[]{0}, 0, 0, 0, 0);
		BLANK_TILE = new Cell(grid, 0);
		Window win = new Window(0, 0, 0, 0);
		win.setGrid(grid);
		BLANK_TILE.setDisabled(true);
	}
	
	public Grid(int[] data, int rowsPerScreen, int colsPerScreen, int gapSize, int orientation) {
		this(data, gapSize, orientation);
		this.rowsPerScreen = rowsPerScreen;
		this.colsPerScreen = colsPerScreen;
		
		cells = new Cell[1][data.length];
		
		for (int j = 0; j < data.length; j++) {
			cells[0][j] = new Cell(this, data[j]);
			cells[0][j].setXInsets(5);
			cells[0][j].setYInsets(5);
		}
	}
	
	protected Grid(int[] data,  int gapSize, int orientation) {
		this.gapSize = gapSize;
		this.orientation = orientation;
			
		cellDragger = new CellDragger(this);
		
		if(orientation == Grid.HORIZONTAL) {
			firstScrollIndicator = new ScrollIndicator(ScrollIndicator.LEFT);
			secondScrollIndicator = new ScrollIndicator(ScrollIndicator.RIGHT);
		} else {
			firstScrollIndicator = new ScrollIndicator(ScrollIndicator.UP);
			secondScrollIndicator = new ScrollIndicator(ScrollIndicator.DOWN);
		}
	}
	
	/**
	 * @param colsPerScreen The number of columns per page
	 * @param windowWidth Width of the window this application is running in
	 * @param windowHeight Height of the window this application is running in
	 * @param gap Size of the gap between rows and columns.
	 */
	public void changeAppearance(int rowsPerScreen, int colsPerScreen, int gap) {
		this.rowsPerScreen = rowsPerScreen;
		this.colsPerScreen = colsPerScreen;
		
		float cellWidth = (int)calcCellWidth();
		float cellHeight = (int)calcCellHeight();
		
		//used for counting total rows and cols
		int lastCol = -1;
		int lastRow = -1;
		
		if(orientation == Grid.VERTICAL) {
			this.cols = colsPerScreen;
			this.rows = 0;
		} else {
			this.rows = rowsPerScreen;
			this.cols = 0;
		}
		
		for (int i = 0; i < cells[0].length; i++) {
			int row = 0;
			int col = 0;
			
			if(orientation == Grid.VERTICAL) {
				col = i % colsPerScreen;
				row = i / colsPerScreen;
				
				if(row != lastRow) {
					lastRow = row;
					this.rows++; //take a count of the number of rows in the new layout
				}
			} else {
				row = i % rowsPerScreen;
				col = i / rowsPerScreen;
				
				if(col != lastCol) {
					lastCol = col;
					this.cols++; //take a count of the number of cols in the new layout
				}
			}
		}

		Cell[][] newCells = new Cell[rows][cols];
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < cols; col++) {
				int index = row * cols + col;
				int rowIndex = (rows-1) - row;
				if(index < cells[0].length) {
					newCells[rowIndex][col] = cells[0][index];
					newCells[rowIndex][col].resize(cellWidth, cellHeight, false);
					float x = getColX(col);
					float y = getRowY(rowIndex); 
					newCells[rowIndex][col].setX(x);
					newCells[rowIndex][col].setY(y);
					newCells[rowIndex][col].setIndex(rowIndex, col);
				} else {
					newCells[rowIndex][col] = BLANK_TILE;
				}
			}
		}

		cells = newCells;
	}
	
	public boolean updateGridPosition(float x, float y) {
		float leftLimit = getLeftLimit();
		float rightLimit = getRightLimit();
		boolean atEdge = false;
		if(x < leftLimit) {
			x = leftLimit;
			atEdge = true;
		}
		if(x > rightLimit) {
			x = rightLimit;
			atEdge = true;
		}
		
		float bottomLimit = getBottomLimit();
		float topLimit = getTopLimit();
		if(y > topLimit) {
			y = topLimit;
			atEdge = true;
		}
		if(y < bottomLimit) {
			y = bottomLimit;
			atEdge = true;
		}

		float gridXDelta = x - lastScrollX;
		float gridYDelta = y - lastScrollY;
		scrollX = x;
		scrollY = y;

		lastScrollX = scrollX;
		lastScrollY = scrollY;
		
		//this must be done after lastScrollX/Y are set, otherwise the disparity will cause issues elsewhere
		scrollX = (int)scrollX;
		scrollY = (int)scrollY;
		
		if(gridXDelta != 0 || gridYDelta != 0) {
			if(cellDragger != null) {
				cellDragger.gridMoved(gridXDelta, gridYDelta);
			}
		}
		
		return atEdge;
	}
	
	public void moveToBeginning() {
		float x = 0;
		float y = 0;
		
		if(getOrientation() == Grid.VERTICAL)
			y = getBottomLimit();
		if(getOrientation() == Grid.HORIZONTAL)
			x = getRightLimit();
		
		updateGridPosition(x, y);
	}
	
	public void moveToEnd(Grid grid) {
		float x = 0;
		float y = 0;
		
		if(grid.getOrientation() == Grid.VERTICAL)
			y = getTopLimit();
		if(grid.getOrientation() == Grid.HORIZONTAL)
			x = getLeftLimit();
		
		updateGridPosition(x, y);
	}
	
	public float getLeftLimit() {
		return -(calcWidth() - window.getWidth());
	}
	
	public  float getRightLimit() {
		return 0;
	}
	
	public float getBottomLimit() {
		return -(calcHeight() - window.getHeight());
	}
	
	public float getTopLimit() {
		return 0;
	}
	
	public void activate() {
		alive = true;
		changeAppearance(rowsPerScreen, colsPerScreen, gapSize);
		moveToBeginning();

		inputHandler = new GridInputHandler(this);
		AbstractInputHandler.addGridInputHandler(inputHandler);
		enableCellSelection();
	}
	
	public void dispose() {
		AbstractInputHandler.removeGridInputHandler(inputHandler);
		GridMaster.removeWindow(window);
		alive = false;
	}

	//might use this for centering the grid within a window, by changing scrollx/y
	private void centerCamera() {
		GridMaster.removeCameraOffset();
		int gridHeight = (int)calcHeight();
		int gridWidth = (int)calcWidth();
		if(gridHeight < Gdx.graphics.getHeight())
			GridMaster.offsetCamera(0, -(Gdx.graphics.getHeight() - gridHeight));
		if(gridWidth < Gdx.graphics.getWidth())
			GridMaster.offsetCamera(Gdx.graphics.getWidth() - gridWidth, 0);

		int xDiff = (int)(Gdx.graphics.getWidth() - (cells[0][0].getWidth()*cols + gapSize*cols - gapSize));
		if(xDiff < 0)
			xDiff = 0;
	}
	
	public void deselectAll() {
		for (int row = 0; row < cells.length; row++) {
			for (int col = 0; col  < cells[row].length; col++) {
				if(cells[row][col].isSelected())
					cells[row][col].setSelected(false);
			}
		}
	}
	
	public void update(float delta) {
		if(alive) {
			updateGridPosition(scrollX + scrollDx*delta, scrollY + scrollDy*delta);
			
			for (int i = 0; i < visibleCells.size(); i++) {
				(visibleCells.get(i)).update(delta);
			}

			firstScrollIndicator.gridPositionUpdate(scrollX, window.getAbsX(), scrollY, window.getAbsY(), this.calcWidth(), this.calcHeight() - getGapSize(), window.getWidth(), window.getHeight());
			secondScrollIndicator.gridPositionUpdate(scrollX, window.getAbsX(), scrollY, window.getAbsY(), this.calcWidth(), this.calcHeight() - getGapSize(), window.getWidth(), window.getHeight());
		}
	}
	
	public void draw() {
		if(alive) {
			lateRenderList.clear();
			visibleCells.clear();
			for (int row = 0; row < cells.length; row++) {
				for (int col = 0; col < cells[row].length; col++) {
					Cell cell = cells[row][col];
					cell.setX(cell.getX() + cell.getOwner().getAbsX());
					cell.setY(cell.getY() + cell.getOwner().getAbsY());
					boolean visible = Util.isRegionVisible(cell.getBounds());
					cell.setX(cell.getX() - cell.getOwner().getAbsX());
					cell.setY(cell.getY() - cell.getOwner().getAbsY());
					if(visible) {
						visibleCells.add(cell);
					if(cell.isDrawLate())
						lateRenderList.add(cell);
					else
						cell.draw();
					}
				}
			}

			for (int i = 0; i < lateRenderList.size(); i++) {
				(lateRenderList.get(i)).draw();
			}
			
			cellDragger.draw();
			drawScrollIndicators();
		}
	}
	
	private void drawScrollIndicators() {
			firstScrollIndicator.draw(window.getAbsX(), window.getAbsY(), window.getWidth() - window.getBorderSize(), window.getHeight());
			secondScrollIndicator.draw(window.getAbsX(), window.getAbsY(), window.getWidth(), window.getHeight());
	}
	
	public void detectVisibleCells() {
		visibleCells.clear();
		for (int row = 0; row < cells.length; row++) {
			for (int col = 0; col < cells[row].length; col++) {
				Cell cell = cells[row][col];
				if(Util.isRegionVisible(cell.getBounds())) {
					visibleCells.add(cell);
				}
			}
		}
	}

	public void updateSelection(int cursorX, int cursorY) {
		for (int i = 0; i < visibleCells.size(); i++) {
			Cell cell = visibleCells.get(i);
			if (cell.isSelected() && !cell.containsCursor(cursorX, cursorY, true))
				cell.setSelected(false);
		}

		if (!cellDragger.isSelecting() && !cellAlreadySelected()) {
			for (int i = 0; i < visibleCells.size(); i++) {
				Cell cell = visibleCells.get(i);
				if (cell.containsCursor(cursorX, cursorY, false)) {
					cell.setSelected(true);
					
					i = cells.length;
					break;
				}
			}
		}
	}
	
	private boolean cellAlreadySelected() {
		boolean selected = false;
		for (int i = 0; i < cells.length; i++) {
			for (int j = 0; j < cells[i].length; j++) {
				if (cells[i][j].isSelected()) {
					if(getVisibleCells().contains(cells[i][j])) {
						selected = true;
						i = cells.length;
						break;
					} else
						cells[i][j].setSelected(false);
					
				}
			}
		}

		return selected;
	}

	public void disableCellSelection() {
		for (int i = 0; i < cells.length; i++) {
			for (int j = 0; j < cells[i].length; j++) {
				cells[i][j].setSelectionDisabled(true);
			}
		}
	}
	
	public void enableCellSelection() {
		for (int i = 0; i < cells.length; i++) {
			for (int j = 0; j < cells[i].length; j++) {
				cells[i][j].setSelectionDisabled(false);
			}
		}
	}
	
	public boolean isCellSelectionDisabled() {
		return cells[0][0].isSelectionDisabled();
	}
	
	public int getOrientation() {
		return orientation;
	}

	public ArrayList<Cell> getVisibleCells() {
		return visibleCells;
	}
		
	public int getGapSize() {
		return gapSize;
	}
	
	public Cell getNeighbor(int row
			, int col, int neighbor) {
		
		assert (neighbor == NEIGHBOR_LEFT || neighbor == NEIGHBOR_RIGHT || neighbor == NEIGHBOR_UP || neighbor == NEIGHBOR_DOWN);
		assert (row > -1 && row < rows && col > -1 && col < cols) : "row: " + row + ", col: " + col;
		
		int startRow = row - rowsPerScreen;
		int endRow = row + rowsPerScreen;
		int startCol = col - colsPerScreen;
		int endCol = col + colsPerScreen;
		
		if(startRow < 0)
			startRow = 0;
		if(endRow > cells.length)
			endRow = cells.length;
		if(startCol < 0)
			startCol = 0;
		if(endCol > cells.length)
			endCol = cells.length;
		
		if(neighbor == NEIGHBOR_LEFT) {
			if(col > 1)
				return cells[row][col - 1];
		} else if(neighbor == NEIGHBOR_RIGHT) {
			if(col < cols - 1)
				return cells[row][col + 1];
		} else if(neighbor == NEIGHBOR_DOWN) {
			if(row > 1)
				return cells[row - 1][col];
		} else if(neighbor == NEIGHBOR_UP) {
			if(row < rows - 1) {
				return cells[row + 1][col];
			}
		}
		
		return null;
	}
	
	public float getRowY(int row) {
		assert (row > -1 && row < rows) : ("row: " + row);
		return cells[0][0].getHeight() * row + gapSize * row; 							   
	}
	
	public float getColX(int col) {
		assert (col > -1 && col < cols) : ("col: " + col);
		return cells[0][0].getWidth() * col + gapSize * col;  
	}
	
	public int getColForX(float x) {
		x -= getAbsX();
		int col = (int)x/(int)(cells[0][0].getWidth() + gapSize);
		return col;
	}
	
	public int getRowForY(float y) {
		y -= getAbsY();
		int row = (int)(y/(cells[0][0].getHeight() + gapSize));
		return row;
	}
	
	public void swap(int sRow, int sCol, int dRow, int dCol) {
		cells[sRow][sCol].setIndex(dRow, dCol);
		cells[dRow][dCol].setIndex(sRow, sCol);
		
		Cell temp = cells[sRow][sCol];
		cells[sRow][sCol] = cells[dRow][dCol];
		cells[dRow][dCol] = temp;
		
		cells[sRow][sCol].setDestX(getColX(sCol), 5f, true);
		cells[sRow][sCol].setDestY(getRowY(sRow), 5f, true);
		
		//will eventually need to update the source positions as well (for now the visual representation is through 'theDragged'
	}
	
	public Cell[][] getCells() {
		return cells;
	}
	
	public int getColumnCount() {
		return cols;
	}
	
	public int getRowCount() {
		return rows;
	}
	
	public CellDragger getCellDragger() {
		return cellDragger;
	}
	
	public float calcHeight() {
		return cells[0][0].getHeight() * rows + gapSize * (rows - 1);
	}
	
	public float calcWidth() {
		return cells[0][0].getWidth() * cols + gapSize * (cols - 1);
	}
	
	public boolean isAlive() {
		return alive;
	}
	
	public float getScrollX() {
		return scrollX;
	}
	
	public void setScrollX(float x) {
		this.scrollX = x;
	}
	
	public float getScrollY() {
		return scrollY;
	}
	
	public void setScrollY(float y) {
		this.scrollY = y;
	}
	
	public float getAbsX() {
		return window.getAbsX() + scrollX;
	}
	
	public float getAbsY() {
		return window.getAbsY() + scrollY;
	}
	
	public GridInputHandler getInputHandler() {
		return inputHandler;
	}
	
	public float calcCellWidth() {
		return (window.getWidth() - gapSize * (colsPerScreen - 1)) / (float)colsPerScreen;
	}
	
	public float calcCellHeight() {
		return (window.getHeight() - gapSize * (rowsPerScreen - 1)) /(float)rowsPerScreen;
	}

	public float getScrollDx() {
		return scrollDx;
	}

	public void setScrollDx(float scrollDx) {
		this.scrollDx = scrollDx;
	}
	
	public float getScrollXChange() {
		return scrollX - lastScrollX;
	}
	
	public float getScrollYChange() {
		return scrollY - lastScrollY;
	}

	public float getScrollDy() {
		return scrollDy;
	}

	public void setScrollDy(float scrollDy) {
		this.scrollDy = scrollDy;
	}
	
	public Window getWindow() {
		return window;
	}
	
	public void setWindow(Window window) {
		this.window = window;
		
	}
	
	protected void setRowsPerScreen(int rowsPerScreen) {
		this.rowsPerScreen = rowsPerScreen;
	}
	
	protected void setColsPerScreen(int colsPerScreen) {
		this.colsPerScreen = colsPerScreen;
	}
	
	protected void setRows(int rows) {
		this.rows = rows;
	}
	
	protected void setCols(int cols) {
		this.cols = cols;
	}
	
	protected void setCells(Cell[][] cells) {
		this.cells = cells;
	}
}